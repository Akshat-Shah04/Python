Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes to structure software. The core concepts of OOP are:

-> Class: A blueprint for creating objects. It defines a set of attributes and methods that the objects created from the class will have.

-> Object: An instance of a class. When a class is defined, no memory is allocated until an object of that class is created.

-> Encapsulation: Encapsulation is the bundling of data (attributes) and methods that operate on the data into a single unit, or class. It also involves restricting access to certain components of an object, which is achieved through access modifiers (e.g., private, protected).

-> Inheritance: Inheritance allows a new class (called a derived or child class) to inherit attributes and methods from an existing class (called a base or parent class). This promotes code reuse and establishes a relationship between the child and parent classes.

-> Polymorphism: Polymorphism allows methods to do different things based on the object it is acting upon. It includes the concept of method overloading (same method name with different signatures) and method overriding (redefining a method in the child class).

-> Abstraction: Abstraction involves hiding the complex implementation details and showing only the essential features of an object. It can be achieved using abstract classes or interfaces.